// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  PREMIUM
  PERSONAL
}

enum Gender {
  MASCULINO
  FEMININO
  OUTRO
}

model User {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  email        String    @unique
  password     String
  role         Role?
  name         String?
  nasc         DateTime?
  weight       Float?
  height       Int?
  gender       Gender?
  workouts     Workout[]
  madeWorkouts Workout[] @relation("madeBy")
  messagesFrom Message[] @relation("fromUser")
  messagesTo   Message[] @relation("toUser")
}

model Workout {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  name      String
  exercises Exercise[]
  madeBy    User       @relation("madeBy", fields: [madeById], references: [id], onDelete: Cascade)
  madeById  Int
}

model Exercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int
  name      String
  sets      Int
  reps      String
}

model Message {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation(fields: [fromUserId], references: [id], name: "fromUser", onDelete: Cascade)
  fromUserId Int
  toUser     User     @relation(fields: [toUserId], references: [id], name: "toUser", onDelete: Cascade)
  toUserId   Int
  text       String
}
